#!/bin/bash


SetupLog() {
  typeset -g thisScriptDir=$( cd $(dirname $0) ; pwd; cd - >/dev/null)
  typeset -g thisScript=$(basename $0)

  
  ## If logFile is already set, continue using same value:

  if [[ -z "${logFile:-}" ]]
  then

    vTimeStamp=`date '+%Y%m%d_%H%M%S'`

    # Create log files directory
    logFileDir=/tmp/Logs_$(whoami)_$(date '+%Y%m%d')

    if [[ ! -e ${logFileDir} ]] 
    then 
      mkdir ${logFileDir}
    fi

    chmod 775 ${logFileDir}

    logFileBaseName=${thisScript}
    logFileName=${logFileBaseName}_${vTimeStamp}.log
    typeset -g logFile=${logFileDir}/${logFileName}

    >${logFile}
    chmod 755 ${logFile}
    tmpERR=/${logFileDir}/tmpERR-$$
    >${tmpERR}
    chmod 755 ${tmpERR}

  fi

  LogMessage "INFO: Log messages will be written to ${logFile}"

  
}

LogMessage () {

  logDate=`date '+%y/%m/%d %H:%M:%S'`
  message="$1"
  message_plus="${message} - ( Message from ${FUNCNAME[@]} - Script name : $0 )"  ## Could build this up by looping through the FUNCNAME array to get full list of functions.

  if [ -z "${logFile}" ]
  then 
    echo "[ ${logDate} ] - ${message_plus} " >&2
  else
    logDate=`date '+%y/%m/%d %H:%M:%S'`
    echo "[ ${logDate} ] - ${message_plus}"  | tee -a ${logFile} >&2
  fi
}


SetVariableFromInputOptionValue(){

  ## This fuction will work on the inputOptions options array that is already set up in the calling function
  ##   and uses the value of i controlled in the calling function


  if [[ -z "${inputOptions[@]:-}" ]]
  then
    LogMessage "ERROR: inputOptions array does not exist"
    return 9
  #else
  #  LogMessage "INFO : inputOptions array is "${inputOptions[@]}
  fi


  variable_to_set=$1


  optName="${inputOptions[${i}]}"
  inputOptions[${i}]='' # remove input option once it is handled here
  i=$(( i + 1 )) ##i++ # move to next entry, which is the value

  ## code to handle empty value being passed
  typeset  tmp=${inputOptions[${i}]-}
  if [[ "${tmp}" =~ ^- ]]
  then
    ##invalid value supplied
    LogMessage "INFO: Assuming that ${optName}  is being passed as empty. Value can not start with '-'"
    tmp=""
    i=$(( i - 1 ))  ## go back , to this can be processed again as a new -- variable
  else
    ##value supplied is ok
    ## keep 'tmp' as it is
    inputOptions[${i}]='' # remove input option once it is handled here
  fi

  ## Set variable to contents of 'tmp'
  eval "${variable_to_set}+=(\"${tmp}\")"   ## Treat it like an array. Works for simple strings too. ( just initialise variable before calling this function ) 


}
